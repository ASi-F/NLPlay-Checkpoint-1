{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Week 2 - Sentiment analysis using feed forwar neural network.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "mount_file_id": "1SN9lvcXvuDb0F3OLuXzNBw3H9QGcTcO_",
      "authorship_tag": "ABX9TyPizB8y+c/VxBmNCXM9yOEQ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ASi-F/NLPlay-Checkpoint-1/blob/main/Week_2_Sentiment_analysis_using_feed_forwar_neural_network.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Mu85otVWxy5T"
      },
      "source": [
        "import pandas as pd\n",
        "import os\n",
        "import torch\n",
        "import numpy as np\n",
        "import nltk\n",
        "import matplotlib.pyplot as plt\n",
        "import random"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2EsM1fyVyuyh"
      },
      "source": [
        "df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/IMDB Dataset.csv')"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 182
        },
        "id": "wO7ozl1vz6-u",
        "outputId": "01f8ccb2-35db-4aa2-ab86-3ee6b9396680"
      },
      "source": [
        "print(df.columns)\n",
        "df.describe()"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Index(['review', 'sentiment'], dtype='object')\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>review</th>\n",
              "      <th>sentiment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>50000</td>\n",
              "      <td>50000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>49582</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>Loved today's show!!! It was a variety and not...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>5</td>\n",
              "      <td>25000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                                   review sentiment\n",
              "count                                               50000     50000\n",
              "unique                                              49582         2\n",
              "top     Loved today's show!!! It was a variety and not...  positive\n",
              "freq                                                    5     25000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ej4PovZEAsqk",
        "outputId": "2cf6c32b-72cf-4684-a208-34182477e358"
      },
      "source": [
        "nltk.download('stopwords')"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h0hkUyyu0Wsh"
      },
      "source": [
        "\n",
        "from nltk.corpus import stopwords\n",
        "stop = stopwords.words('english')\n",
        "df['without_stopwords'] = df['review'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop)]))"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 120
        },
        "id": "O1fpTiYg0baf",
        "outputId": "d0e7545d-3672-4c5d-e015-8261f6ee9126"
      },
      "source": [
        "df['without_stopwords'][0]"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "\"One reviewers mentioned watching 1 Oz episode hooked. They right, exactly happened me.<br /><br />The first thing struck Oz brutality unflinching scenes violence, set right word GO. Trust me, show faint hearted timid. This show pulls punches regards drugs, sex violence. Its hardcore, classic use word.<br /><br />It called OZ nickname given Oswald Maximum Security State Penitentary. It focuses mainly Emerald City, experimental section prison cells glass fronts face inwards, privacy high agenda. Em City home many..Aryans, Muslims, gangstas, Latinos, Christians, Italians, Irish more....so scuffles, death stares, dodgy dealings shady agreements never far away.<br /><br />I would say main appeal show due fact goes shows dare. Forget pretty pictures painted mainstream audiences, forget charm, forget romance...OZ mess around. The first episode I ever saw struck nasty surreal, I say I ready it, I watched more, I developed taste Oz, got accustomed high levels graphic violence. Not violence, injustice (crooked guards who'll sold nickel, inmates who'll kill order get away it, well mannered, middle class inmates turned prison bitches due lack street skills prison experience) Watching Oz, may become comfortable uncomfortable viewing....thats get touch darker side.\""
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2KXJmh-j0fZ8"
      },
      "source": [
        "def remove_punctuation(text):\n",
        "    final = \"\".join(u for u in text if u not in (\"?\", \".\", \";\", \":\", \"!\", '\"', ','))\n",
        "    return final\n",
        "\n",
        "df['without_stopwords'] = df['without_stopwords'].apply(remove_punctuation)"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Sj7ZQzxs0p2z"
      },
      "source": [
        "def remove_tags(text):\n",
        "    final = \"\"\n",
        "    stt = True\n",
        "    for char in text:\n",
        "        if char == '<':\n",
        "            stt = False\n",
        "        if(stt):\n",
        "            final = final + char\n",
        "        if char == '>':\n",
        "            stt = True\n",
        "            final = final + ' '\n",
        "    return final\n",
        "df['without_stopwords'] = df['without_stopwords'].apply(remove_tags)"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 120
        },
        "id": "mbbYpLxB0quq",
        "outputId": "741901be-0a51-4f3b-9ae9-66edb185e287"
      },
      "source": [
        "df['without_stopwords'][0]"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "\"One reviewers mentioned watching 1 Oz episode hooked They right exactly happened me  The first thing struck Oz brutality unflinching scenes violence set right word GO Trust me show faint hearted timid This show pulls punches regards drugs sex violence Its hardcore classic use word  It called OZ nickname given Oswald Maximum Security State Penitentary It focuses mainly Emerald City experimental section prison cells glass fronts face inwards privacy high agenda Em City home manyAryans Muslims gangstas Latinos Christians Italians Irish moreso scuffles death stares dodgy dealings shady agreements never far away  I would say main appeal show due fact goes shows dare Forget pretty pictures painted mainstream audiences forget charm forget romanceOZ mess around The first episode I ever saw struck nasty surreal I say I ready it I watched more I developed taste Oz got accustomed high levels graphic violence Not violence injustice (crooked guards who'll sold nickel inmates who'll kill order get away it well mannered middle class inmates turned prison bitches due lack street skills prison experience) Watching Oz may become comfortable uncomfortable viewingthats get touch darker side\""
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 120
        },
        "id": "IjuB48oi0tp8",
        "outputId": "acabc4a1-0431-49f9-c07a-91214f32572e"
      },
      "source": [
        "df['review'][0]"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "\"One of the other reviewers has mentioned that after watching just 1 Oz episode you'll be hooked. They are right, as this is exactly what happened with me.<br /><br />The first thing that struck me about Oz was its brutality and unflinching scenes of violence, which set in right from the word GO. Trust me, this is not a show for the faint hearted or timid. This show pulls no punches with regards to drugs, sex or violence. Its is hardcore, in the classic use of the word.<br /><br />It is called OZ as that is the nickname given to the Oswald Maximum Security State Penitentary. It focuses mainly on Emerald City, an experimental section of the prison where all the cells have glass fronts and face inwards, so privacy is not high on the agenda. Em City is home to many..Aryans, Muslims, gangstas, Latinos, Christians, Italians, Irish and more....so scuffles, death stares, dodgy dealings and shady agreements are never far away.<br /><br />I would say the main appeal of the show is due to the fact that it goes where other shows wouldn't dare. Forget pretty pictures painted for mainstream audiences, forget charm, forget romance...OZ doesn't mess around. The first episode I ever saw struck me as so nasty it was surreal, I couldn't say I was ready for it, but as I watched more, I developed a taste for Oz, and got accustomed to the high levels of graphic violence. Not just violence, but injustice (crooked guards who'll be sold out for a nickel, inmates who'll kill on order and get away with it, well mannered, middle class inmates being turned into prison bitches due to their lack of street skills or prison experience) Watching Oz, you may become comfortable with what is uncomfortable viewing....thats if you can get in touch with your darker side.\""
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6aQPp3LGBPwc",
        "outputId": "bd4fc282-aa67-4766-f363-db9b07bc5fdc"
      },
      "source": [
        "nltk.download('punkt')"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Package punkt is already up-to-date!\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7BA1oPRr00df"
      },
      "source": [
        "df['tokens'] = df['without_stopwords'].apply(nltk.word_tokenize)"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DqrBwHk008tC"
      },
      "source": [
        "def stem_tokens(tokens):\n",
        "    final = [nltk.stem.PorterStemmer().stem(word) for word in tokens]\n",
        "    return final\n",
        "    \n",
        "df['stemmed_tokens'] = df['tokens'].apply(stem_tokens)"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PrtriUPn1DAg"
      },
      "source": [
        "df['label'] = [2*(sent=='positive')-1 for sent in df['sentiment']]"
      ],
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 381
        },
        "id": "e1TZb4_g1Ie5",
        "outputId": "cb5f0944-9ff6-481e-ad18-2e6ddf8b91e3"
      },
      "source": [
        "df.head(9)"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>review</th>\n",
              "      <th>sentiment</th>\n",
              "      <th>without_stopwords</th>\n",
              "      <th>tokens</th>\n",
              "      <th>stemmed_tokens</th>\n",
              "      <th>label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>One of the other reviewers has mentioned that ...</td>\n",
              "      <td>positive</td>\n",
              "      <td>One reviewers mentioned watching 1 Oz episode ...</td>\n",
              "      <td>[One, reviewers, mentioned, watching, 1, Oz, e...</td>\n",
              "      <td>[one, review, mention, watch, 1, Oz, episod, h...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>A wonderful little production. &lt;br /&gt;&lt;br /&gt;The...</td>\n",
              "      <td>positive</td>\n",
              "      <td>A wonderful little production   The filming te...</td>\n",
              "      <td>[A, wonderful, little, production, The, filmin...</td>\n",
              "      <td>[A, wonder, littl, product, the, film, techniq...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>I thought this was a wonderful way to spend ti...</td>\n",
              "      <td>positive</td>\n",
              "      <td>I thought wonderful way spend time hot summer ...</td>\n",
              "      <td>[I, thought, wonderful, way, spend, time, hot,...</td>\n",
              "      <td>[I, thought, wonder, way, spend, time, hot, su...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Basically there's a family where a little boy ...</td>\n",
              "      <td>negative</td>\n",
              "      <td>Basically there's family little boy (Jake) thi...</td>\n",
              "      <td>[Basically, there, 's, family, little, boy, (,...</td>\n",
              "      <td>[basic, there, 's, famili, littl, boy, (, jake...</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Petter Mattei's \"Love in the Time of Money\" is...</td>\n",
              "      <td>positive</td>\n",
              "      <td>Petter Mattei's Love Time Money visually stunn...</td>\n",
              "      <td>[Petter, Mattei, 's, Love, Time, Money, visual...</td>\n",
              "      <td>[petter, mattei, 's, love, time, money, visual...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Probably my all-time favorite movie, a story o...</td>\n",
              "      <td>positive</td>\n",
              "      <td>Probably all-time favorite movie story selfles...</td>\n",
              "      <td>[Probably, all-time, favorite, movie, story, s...</td>\n",
              "      <td>[probabl, all-tim, favorit, movi, stori, selfl...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>I sure would like to see a resurrection of a u...</td>\n",
              "      <td>positive</td>\n",
              "      <td>I sure would like see resurrection dated Seahu...</td>\n",
              "      <td>[I, sure, would, like, see, resurrection, date...</td>\n",
              "      <td>[I, sure, would, like, see, resurrect, date, s...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>This show was an amazing, fresh &amp; innovative i...</td>\n",
              "      <td>negative</td>\n",
              "      <td>This show amazing fresh &amp; innovative idea 70's...</td>\n",
              "      <td>[This, show, amazing, fresh, &amp;, innovative, id...</td>\n",
              "      <td>[thi, show, amaz, fresh, &amp;, innov, idea, 70, '...</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Encouraged by the positive comments about this...</td>\n",
              "      <td>negative</td>\n",
              "      <td>Encouraged positive comments film I looking fo...</td>\n",
              "      <td>[Encouraged, positive, comments, film, I, look...</td>\n",
              "      <td>[encourag, posit, comment, film, I, look, forw...</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                              review  ... label\n",
              "0  One of the other reviewers has mentioned that ...  ...     1\n",
              "1  A wonderful little production. <br /><br />The...  ...     1\n",
              "2  I thought this was a wonderful way to spend ti...  ...     1\n",
              "3  Basically there's a family where a little boy ...  ...    -1\n",
              "4  Petter Mattei's \"Love in the Time of Money\" is...  ...     1\n",
              "5  Probably my all-time favorite movie, a story o...  ...     1\n",
              "6  I sure would like to see a resurrection of a u...  ...     1\n",
              "7  This show was an amazing, fresh & innovative i...  ...    -1\n",
              "8  Encouraged by the positive comments about this...  ...    -1\n",
              "\n",
              "[9 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Qh8WVewa1NGS"
      },
      "source": [
        "from gensim import corpora\n",
        "\n",
        "review_dict = corpora.Dictionary(df['stemmed_tokens'])"
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gGcjzTDY1dM2",
        "outputId": "2bb9e968-c30b-4e91-e417-11430590f964"
      },
      "source": [
        "print(review_dict)"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Dictionary(133824 unique tokens: [\"'ll\", '(', ')', '1', 'Em']...)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S8o7sdNR1ghE",
        "outputId": "4e33d3b5-3721-46eb-f669-aa99d1cc3e27"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "# Train Test Split Function\n",
        "\n",
        "def split_train_test(top_data_df_small, test_size=0.3, shuffle_state=True):\n",
        "    X_train, X_test, Y_train, Y_test = train_test_split(top_data_df_small[['review','sentiment','without_stopwords','tokens','stemmed_tokens','label']], \n",
        "                                                        top_data_df_small['label'], \n",
        "                                                        shuffle=shuffle_state,\n",
        "                                                        test_size=test_size, \n",
        "                                                        random_state=15)\n",
        "    print(\"Value counts for Train sentiments\")\n",
        "    print(Y_train.value_counts())\n",
        "    print(\"Value counts for Test sentiments\")\n",
        "    print(Y_test.value_counts())\n",
        "    print(type(X_train))\n",
        "    print(type(Y_train))\n",
        "    X_train = X_train.reset_index()\n",
        "    X_test = X_test.reset_index()\n",
        "    Y_train = Y_train.to_frame()\n",
        "    Y_train = Y_train.reset_index()\n",
        "    Y_test = Y_test.to_frame()\n",
        "    Y_test = Y_test.reset_index()\n",
        "    print(X_train.head())\n",
        "    return X_train, X_test, Y_train, Y_test\n",
        "\n",
        "# Call the train_test_split\n",
        "X_train, X_test, Y_train, Y_test = split_train_test(df)"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Value counts for Train sentiments\n",
            "-1    17512\n",
            " 1    17488\n",
            "Name: label, dtype: int64\n",
            "Value counts for Test sentiments\n",
            " 1    7512\n",
            "-1    7488\n",
            "Name: label, dtype: int64\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "<class 'pandas.core.series.Series'>\n",
            "   index  ... label\n",
            "0  36322  ...     1\n",
            "1   4638  ...     1\n",
            "2  46808  ...    -1\n",
            "3  38099  ...    -1\n",
            "4  31461  ...     1\n",
            "\n",
            "[5 rows x 7 columns]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 570
        },
        "id": "0Oj61buu1uoH",
        "outputId": "b12cdb8c-aa7b-441e-fea2-2b92f2760a7c"
      },
      "source": [
        "X_train"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>review</th>\n",
              "      <th>sentiment</th>\n",
              "      <th>without_stopwords</th>\n",
              "      <th>tokens</th>\n",
              "      <th>stemmed_tokens</th>\n",
              "      <th>label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>36322</td>\n",
              "      <td>The sequel is exactly what you will expect it ...</td>\n",
              "      <td>positive</td>\n",
              "      <td>The sequel exactly expect be And good enough e...</td>\n",
              "      <td>[The, sequel, exactly, expect, be, And, good, ...</td>\n",
              "      <td>[the, sequel, exactli, expect, be, and, good, ...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4638</td>\n",
              "      <td>This is a pretty well known one so i won't get...</td>\n",
              "      <td>positive</td>\n",
              "      <td>This pretty well known one get deep it The bas...</td>\n",
              "      <td>[This, pretty, well, known, one, get, deep, it...</td>\n",
              "      <td>[thi, pretti, well, known, one, get, deep, it,...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>46808</td>\n",
              "      <td>I made the mistake of buying this since I coll...</td>\n",
              "      <td>negative</td>\n",
              "      <td>I made mistake buying since I collect comic bo...</td>\n",
              "      <td>[I, made, mistake, buying, since, I, collect, ...</td>\n",
              "      <td>[I, made, mistak, buy, sinc, I, collect, comic...</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>38099</td>\n",
              "      <td>This movie is the proverbial 80s flick that sh...</td>\n",
              "      <td>negative</td>\n",
              "      <td>This movie proverbial 80s flick shows viewer l...</td>\n",
              "      <td>[This, movie, proverbial, 80s, flick, shows, v...</td>\n",
              "      <td>[thi, movi, proverbi, 80, flick, show, viewer,...</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>31461</td>\n",
              "      <td>I absolutely LOVED this movie as a child. I ca...</td>\n",
              "      <td>positive</td>\n",
              "      <td>I absolutely LOVED movie child I can't seem fi...</td>\n",
              "      <td>[I, absolutely, LOVED, movie, child, I, ca, n'...</td>\n",
              "      <td>[I, absolut, love, movi, child, I, ca, n't, se...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34995</th>\n",
              "      <td>39296</td>\n",
              "      <td>When i started watching \"Surface\"for the first...</td>\n",
              "      <td>positive</td>\n",
              "      <td>When started watching Surfacefor first time ho...</td>\n",
              "      <td>[When, started, watching, Surfacefor, first, t...</td>\n",
              "      <td>[when, start, watch, surfacefor, first, time, ...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34996</th>\n",
              "      <td>49015</td>\n",
              "      <td>Are you kidding me? This is quite possibly the...</td>\n",
              "      <td>negative</td>\n",
              "      <td>Are kidding me This quite possibly worst amate...</td>\n",
              "      <td>[Are, kidding, me, This, quite, possibly, wors...</td>\n",
              "      <td>[are, kid, me, thi, quit, possibl, worst, amat...</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34997</th>\n",
              "      <td>2693</td>\n",
              "      <td>One would make you believe that this game is a...</td>\n",
              "      <td>negative</td>\n",
              "      <td>One would make believe game man obsessed numbe...</td>\n",
              "      <td>[One, would, make, believe, game, man, obsesse...</td>\n",
              "      <td>[one, would, make, believ, game, man, obsess, ...</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34998</th>\n",
              "      <td>8076</td>\n",
              "      <td>I'D BUY THAT FOR A DOLLAR!!!&lt;br /&gt;&lt;br /&gt;I did ...</td>\n",
              "      <td>positive</td>\n",
              "      <td>I'D BUY THAT FOR A DOLLAR  I buy film dollar I...</td>\n",
              "      <td>[I, 'D, BUY, THAT, FOR, A, DOLLAR, I, buy, fil...</td>\n",
              "      <td>[I, 'D, buy, that, for, A, dollar, I, buy, fil...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34999</th>\n",
              "      <td>7624</td>\n",
              "      <td>Seems to have been made as a vehicle for W.C. ...</td>\n",
              "      <td>positive</td>\n",
              "      <td>Seems made vehicle WC Fields Carol Dempster do...</td>\n",
              "      <td>[Seems, made, vehicle, WC, Fields, Carol, Demp...</td>\n",
              "      <td>[seem, made, vehicl, WC, field, carol, dempste...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>35000 rows × 7 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "       index  ... label\n",
              "0      36322  ...     1\n",
              "1       4638  ...     1\n",
              "2      46808  ...    -1\n",
              "3      38099  ...    -1\n",
              "4      31461  ...     1\n",
              "...      ...  ...   ...\n",
              "34995  39296  ...     1\n",
              "34996  49015  ...    -1\n",
              "34997   2693  ...    -1\n",
              "34998   8076  ...     1\n",
              "34999   7624  ...     1\n",
              "\n",
              "[35000 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PIiXs1Ysf1LF"
      },
      "source": [
        "# Neural network"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FFl6-Yu31zML",
        "outputId": "164d2a08-ed7b-4939-c4e9-0357ac908205"
      },
      "source": [
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "import torch.optim as optim\n",
        "\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "print(\"Device available for running: \")\n",
        "print(device)"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Device available for running: \n",
            "cuda\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zUTq4V3v14Ka"
      },
      "source": [
        "# define FeedforwardNeuralNetwork\n",
        "class FeedForwardNN(nn.Module):\n",
        "    def __init__(self,input_size,hidden_size,output_size):\n",
        "        super(FeedForwardNN,self).__init__()\n",
        "        \n",
        "        # Linear fnction 1\n",
        "        self.LF1 = nn.Linear(input_size,hidden_size)\n",
        "        # Nonlinear fnction 1\n",
        "        self.NLF1 = nn.ReLU()\n",
        "        \n",
        "        # Linear function 2\n",
        "        self.LF2 = nn.Linear(hidden_size,hidden_size)\n",
        "        # Nonlinear fnction 2\n",
        "        self.NLF2 = nn.ReLU()\n",
        "        \n",
        "        #Linear function 2\n",
        "        self.LF3 = nn.Linear(hidden_size,output_size)\n",
        "        \n",
        "    def forward(self,x):\n",
        "        # Layer 1\n",
        "        out = self.LF1(x)\n",
        "        out = self.NLF1(out)\n",
        "        \n",
        "        #Layer 2 \n",
        "        out = self.LF2(out)\n",
        "        out = self.NLF2(out)\n",
        "        \n",
        "        #Layer 3\n",
        "        out = self.LF3(out)\n",
        "        \n",
        "        return F.softmax(out,dim=1)\n",
        "        "
      ],
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jDusEO5D16sh"
      },
      "source": [
        "VOCAB_SIZE = len(review_dict)\n",
        "NUM_LABELS = 2\n",
        "\n",
        "def make_bow_vector(review_dict, sentence):\n",
        "    vec = torch.zeros(VOCAB_SIZE,dtype = torch.float64, device = device)\n",
        "    for word in sentence:\n",
        "        vec[review_dict.token2id[word]]+=1\n",
        "    return vec.reshape(1,-1).float()"
      ],
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7JbGEpUQ19M_"
      },
      "source": [
        "def make_pred(label):\n",
        "    if label == -1:\n",
        "        return torch.tensor([0], dtype = torch.long, device = device)\n",
        "    elif label == 1:\n",
        "        return torch.tensor([1], dtype = torch.long, device = device)"
      ],
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8z7BvPQD2FOJ"
      },
      "source": [
        "\n",
        "def train(num_epochs,batch_size,optimizer,loss_function = nn.CrossEntropyLoss()):\n",
        "  losses = []\n",
        "  task_len = num_epochs *len(X_train)\n",
        "  ittr = 0\n",
        "  for epoch in range(num_epochs):\n",
        "      train_loss = torch.tensor([0.],device = device)\n",
        "      for index,row in X_train.iterrows():\n",
        "          ittr+=1\n",
        "          if ittr%(task_len//100) == 0:\n",
        "            print(ittr*100//(task_len),'% complemeted')\n",
        "          # make bag of word vector \n",
        "          bow_vec = make_bow_vector(review_dict,row['stemmed_tokens'])\n",
        "        \n",
        "          # Forward pass\n",
        "          preds = FFNN(bow_vec)\n",
        "        \n",
        "          # get target label\n",
        "          target = make_pred(Y_train['label'][index])\n",
        "\n",
        "          loss = loss_function(preds, target)\n",
        "  \n",
        "          train_loss +=loss\n",
        "        \n",
        "          if ittr%batch_size ==0:\n",
        "            # clear gradients\n",
        "            optimizer.zero_grad()\n",
        "\n",
        "            # compute gradientts\n",
        "            train_loss.backward()\n",
        "\n",
        "            # update parameters\n",
        "            optimizer.step()\n",
        "            \n",
        "            losses.append(train_loss.item())\n",
        "            train_loss = 0.\n",
        "  return losses"
      ],
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fPescAW87p18"
      },
      "source": [
        "def accuracy():\n",
        "  correct_preds = 0\n",
        "  for index,row in X_test.iterrows():\n",
        "    bow_vec = make_bow_vector(review_dict,row['stemmed_tokens'])\n",
        "    # Forward pass\n",
        "    preds = list(FFNN(bow_vec)[0])\n",
        "    if preds[0]>preds[1]:\n",
        "      out = -1\n",
        "    else :\n",
        "      out = +1\n",
        "    if out == row['label']:\n",
        "      correct_preds+=1\n",
        "  \n",
        "  return correct_preds*100/len(X_test)\n",
        "\n",
        "def plot_loss(losses):\n",
        "  x = [i for i in range(0,len(losses))]\n",
        "  plt.plot(x,losses)\n",
        "  plt.title('Loss fnction')\n",
        "  plt.ylabel('Loss')\n",
        "  plt.xlabel('batch index')"
      ],
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X9kSN_pW1_qd"
      },
      "source": [
        "VOCAB_SIZE = len(review_dict)\n",
        "\n",
        "input_size = VOCAB_SIZE\n",
        "hidden_dim = 500\n",
        "output_size = 2\n",
        "num_epochs = 2\n",
        "batch_size = 200\n",
        "\n",
        "FFNN = FeedForwardNN(input_size,hidden_dim,output_size)\n",
        "FFNN.to(device)\n",
        "loss_function = nn.CrossEntropyLoss()\n",
        "optimizer = optim.SGD(FFNN.parameters(), lr = 0.005)"
      ],
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dqKVHhhQLu6J",
        "outputId": "7871516b-4c8d-47e1-cfdb-0c1db436d164"
      },
      "source": [
        "losses = train(num_epochs,200,optimizer)"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1 % complemeted\n",
            "2 % complemeted\n",
            "3 % complemeted\n",
            "4 % complemeted\n",
            "5 % complemeted\n",
            "6 % complemeted\n",
            "7 % complemeted\n",
            "8 % complemeted\n",
            "9 % complemeted\n",
            "10 % complemeted\n",
            "11 % complemeted\n",
            "12 % complemeted\n",
            "13 % complemeted\n",
            "14 % complemeted\n",
            "15 % complemeted\n",
            "16 % complemeted\n",
            "17 % complemeted\n",
            "18 % complemeted\n",
            "19 % complemeted\n",
            "20 % complemeted\n",
            "21 % complemeted\n",
            "22 % complemeted\n",
            "23 % complemeted\n",
            "24 % complemeted\n",
            "25 % complemeted\n",
            "26 % complemeted\n",
            "27 % complemeted\n",
            "28 % complemeted\n",
            "29 % complemeted\n",
            "30 % complemeted\n",
            "31 % complemeted\n",
            "32 % complemeted\n",
            "33 % complemeted\n",
            "34 % complemeted\n",
            "35 % complemeted\n",
            "36 % complemeted\n",
            "37 % complemeted\n",
            "38 % complemeted\n",
            "39 % complemeted\n",
            "40 % complemeted\n",
            "41 % complemeted\n",
            "42 % complemeted\n",
            "43 % complemeted\n",
            "44 % complemeted\n",
            "45 % complemeted\n",
            "46 % complemeted\n",
            "47 % complemeted\n",
            "48 % complemeted\n",
            "49 % complemeted\n",
            "50 % complemeted\n",
            "51 % complemeted\n",
            "52 % complemeted\n",
            "53 % complemeted\n",
            "54 % complemeted\n",
            "55 % complemeted\n",
            "56 % complemeted\n",
            "57 % complemeted\n",
            "58 % complemeted\n",
            "59 % complemeted\n",
            "60 % complemeted\n",
            "61 % complemeted\n",
            "62 % complemeted\n",
            "63 % complemeted\n",
            "64 % complemeted\n",
            "65 % complemeted\n",
            "66 % complemeted\n",
            "67 % complemeted\n",
            "68 % complemeted\n",
            "69 % complemeted\n",
            "70 % complemeted\n",
            "71 % complemeted\n",
            "72 % complemeted\n",
            "73 % complemeted\n",
            "74 % complemeted\n",
            "75 % complemeted\n",
            "76 % complemeted\n",
            "77 % complemeted\n",
            "78 % complemeted\n",
            "79 % complemeted\n",
            "80 % complemeted\n",
            "81 % complemeted\n",
            "82 % complemeted\n",
            "83 % complemeted\n",
            "84 % complemeted\n",
            "85 % complemeted\n",
            "86 % complemeted\n",
            "87 % complemeted\n",
            "88 % complemeted\n",
            "89 % complemeted\n",
            "90 % complemeted\n",
            "91 % complemeted\n",
            "92 % complemeted\n",
            "93 % complemeted\n",
            "94 % complemeted\n",
            "95 % complemeted\n",
            "96 % complemeted\n",
            "97 % complemeted\n",
            "98 % complemeted\n",
            "99 % complemeted\n",
            "100 % complemeted\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ni6hnpaR08v4",
        "outputId": "5b895673-0242-47cc-e095-2f9a0892f23e"
      },
      "source": [
        "accuracy()"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "80.42666666666666"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "S3fYkYgQPbWj",
        "outputId": "e595f06a-e0f4-4a96-bed3-2706a9f2ad31"
      },
      "source": [
        "plot_loss(losses)"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0g5397LUPdQ5",
        "outputId": "21184cb8-189d-462f-d5a4-f6b43ccc2a5a"
      },
      "source": [
        "optimizer = optim.SGD(FFNN.parameters(), lr = 0.001)\n",
        "num_epochs = 2\n",
        "batch_size = 100\n",
        "losses = train(num_epochs,batch_size,optimizer)"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1 % complemeted\n",
            "2 % complemeted\n",
            "3 % complemeted\n",
            "4 % complemeted\n",
            "5 % complemeted\n",
            "6 % complemeted\n",
            "7 % complemeted\n",
            "8 % complemeted\n",
            "9 % complemeted\n",
            "10 % complemeted\n",
            "11 % complemeted\n",
            "12 % complemeted\n",
            "13 % complemeted\n",
            "14 % complemeted\n",
            "15 % complemeted\n",
            "16 % complemeted\n",
            "17 % complemeted\n",
            "18 % complemeted\n",
            "19 % complemeted\n",
            "20 % complemeted\n",
            "21 % complemeted\n",
            "22 % complemeted\n",
            "23 % complemeted\n",
            "24 % complemeted\n",
            "25 % complemeted\n",
            "26 % complemeted\n",
            "27 % complemeted\n",
            "28 % complemeted\n",
            "29 % complemeted\n",
            "30 % complemeted\n",
            "31 % complemeted\n",
            "32 % complemeted\n",
            "33 % complemeted\n",
            "34 % complemeted\n",
            "35 % complemeted\n",
            "36 % complemeted\n",
            "37 % complemeted\n",
            "38 % complemeted\n",
            "39 % complemeted\n",
            "40 % complemeted\n",
            "41 % complemeted\n",
            "42 % complemeted\n",
            "43 % complemeted\n",
            "44 % complemeted\n",
            "45 % complemeted\n",
            "46 % complemeted\n",
            "47 % complemeted\n",
            "48 % complemeted\n",
            "49 % complemeted\n",
            "50 % complemeted\n",
            "51 % complemeted\n",
            "52 % complemeted\n",
            "53 % complemeted\n",
            "54 % complemeted\n",
            "55 % complemeted\n",
            "56 % complemeted\n",
            "57 % complemeted\n",
            "58 % complemeted\n",
            "59 % complemeted\n",
            "60 % complemeted\n",
            "61 % complemeted\n",
            "62 % complemeted\n",
            "63 % complemeted\n",
            "64 % complemeted\n",
            "65 % complemeted\n",
            "66 % complemeted\n",
            "67 % complemeted\n",
            "68 % complemeted\n",
            "69 % complemeted\n",
            "70 % complemeted\n",
            "71 % complemeted\n",
            "72 % complemeted\n",
            "73 % complemeted\n",
            "74 % complemeted\n",
            "75 % complemeted\n",
            "76 % complemeted\n",
            "77 % complemeted\n",
            "78 % complemeted\n",
            "79 % complemeted\n",
            "80 % complemeted\n",
            "81 % complemeted\n",
            "82 % complemeted\n",
            "83 % complemeted\n",
            "84 % complemeted\n",
            "85 % complemeted\n",
            "86 % complemeted\n",
            "87 % complemeted\n",
            "88 % complemeted\n",
            "89 % complemeted\n",
            "90 % complemeted\n",
            "91 % complemeted\n",
            "92 % complemeted\n",
            "93 % complemeted\n",
            "94 % complemeted\n",
            "95 % complemeted\n",
            "96 % complemeted\n",
            "97 % complemeted\n",
            "98 % complemeted\n",
            "99 % complemeted\n",
            "100 % complemeted\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "id": "oJR78CQ0x48E",
        "outputId": "5ad89354-7d35-4731-80a8-3e6926d4ba1b"
      },
      "source": [
        "print(accuracy())\n",
        "\n",
        "plot_loss(losses)"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "87.60666666666667\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HlBdLmn_y1hK",
        "outputId": "5c79883e-5f24-4688-c30d-2931eaa5739d"
      },
      "source": [
        "optimizer = optim.SGD(FFNN.parameters(), lr = 0.0001)\n",
        "num_epochs = 3\n",
        "batch_size = 1000\n",
        "losses = train(num_epochs,batch_size,optimizer)"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1 % complemeted\n",
            "2 % complemeted\n",
            "3 % complemeted\n",
            "4 % complemeted\n",
            "5 % complemeted\n",
            "6 % complemeted\n",
            "7 % complemeted\n",
            "8 % complemeted\n",
            "9 % complemeted\n",
            "10 % complemeted\n",
            "11 % complemeted\n",
            "12 % complemeted\n",
            "13 % complemeted\n",
            "14 % complemeted\n",
            "15 % complemeted\n",
            "16 % complemeted\n",
            "17 % complemeted\n",
            "18 % complemeted\n",
            "19 % complemeted\n",
            "20 % complemeted\n",
            "21 % complemeted\n",
            "22 % complemeted\n",
            "23 % complemeted\n",
            "24 % complemeted\n",
            "25 % complemeted\n",
            "26 % complemeted\n",
            "27 % complemeted\n",
            "28 % complemeted\n",
            "29 % complemeted\n",
            "30 % complemeted\n",
            "31 % complemeted\n",
            "32 % complemeted\n",
            "33 % complemeted\n",
            "34 % complemeted\n",
            "35 % complemeted\n",
            "36 % complemeted\n",
            "37 % complemeted\n",
            "38 % complemeted\n",
            "39 % complemeted\n",
            "40 % complemeted\n",
            "41 % complemeted\n",
            "42 % complemeted\n",
            "43 % complemeted\n",
            "44 % complemeted\n",
            "45 % complemeted\n",
            "46 % complemeted\n",
            "47 % complemeted\n",
            "48 % complemeted\n",
            "49 % complemeted\n",
            "50 % complemeted\n",
            "51 % complemeted\n",
            "52 % complemeted\n",
            "53 % complemeted\n",
            "54 % complemeted\n",
            "55 % complemeted\n",
            "56 % complemeted\n",
            "57 % complemeted\n",
            "58 % complemeted\n",
            "59 % complemeted\n",
            "60 % complemeted\n",
            "61 % complemeted\n",
            "62 % complemeted\n",
            "63 % complemeted\n",
            "64 % complemeted\n",
            "65 % complemeted\n",
            "66 % complemeted\n",
            "67 % complemeted\n",
            "68 % complemeted\n",
            "69 % complemeted\n",
            "70 % complemeted\n",
            "71 % complemeted\n",
            "72 % complemeted\n",
            "73 % complemeted\n",
            "74 % complemeted\n",
            "75 % complemeted\n",
            "76 % complemeted\n",
            "77 % complemeted\n",
            "78 % complemeted\n",
            "79 % complemeted\n",
            "80 % complemeted\n",
            "81 % complemeted\n",
            "82 % complemeted\n",
            "83 % complemeted\n",
            "84 % complemeted\n",
            "85 % complemeted\n",
            "86 % complemeted\n",
            "87 % complemeted\n",
            "88 % complemeted\n",
            "89 % complemeted\n",
            "90 % complemeted\n",
            "91 % complemeted\n",
            "92 % complemeted\n",
            "93 % complemeted\n",
            "94 % complemeted\n",
            "95 % complemeted\n",
            "96 % complemeted\n",
            "97 % complemeted\n",
            "98 % complemeted\n",
            "99 % complemeted\n",
            "100 % complemeted\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "id": "F3TSK4gb0Eta",
        "outputId": "a0690365-0473-4434-a218-7adbdcb89095"
      },
      "source": [
        "print(accuracy())\n",
        "\n",
        "plot_loss(losses)"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "87.67333333333333\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0gGIT-mV1rwx",
        "outputId": "b69aa759-70a0-4648-fc80-3321d4c0d4b5"
      },
      "source": [
        "optimizer = optim.SGD(FFNN.parameters(), lr = 1e-6)\n",
        "num_epochs = 5\n",
        "batch_size = 5000\n",
        "losses = train(num_epochs,batch_size,optimizer)"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1 % complemeted\n",
            "2 % complemeted\n",
            "3 % complemeted\n",
            "4 % complemeted\n",
            "5 % complemeted\n",
            "6 % complemeted\n",
            "7 % complemeted\n",
            "8 % complemeted\n",
            "9 % complemeted\n",
            "10 % complemeted\n",
            "11 % complemeted\n",
            "12 % complemeted\n",
            "13 % complemeted\n",
            "14 % complemeted\n",
            "15 % complemeted\n",
            "16 % complemeted\n",
            "17 % complemeted\n",
            "18 % complemeted\n",
            "19 % complemeted\n",
            "20 % complemeted\n",
            "21 % complemeted\n",
            "22 % complemeted\n",
            "23 % complemeted\n",
            "24 % complemeted\n",
            "25 % complemeted\n",
            "26 % complemeted\n",
            "27 % complemeted\n",
            "28 % complemeted\n",
            "29 % complemeted\n",
            "30 % complemeted\n",
            "31 % complemeted\n",
            "32 % complemeted\n",
            "33 % complemeted\n",
            "34 % complemeted\n",
            "35 % complemeted\n",
            "36 % complemeted\n",
            "37 % complemeted\n",
            "38 % complemeted\n",
            "39 % complemeted\n",
            "40 % complemeted\n",
            "41 % complemeted\n",
            "42 % complemeted\n",
            "43 % complemeted\n",
            "44 % complemeted\n",
            "45 % complemeted\n",
            "46 % complemeted\n",
            "47 % complemeted\n",
            "48 % complemeted\n",
            "49 % complemeted\n",
            "50 % complemeted\n",
            "51 % complemeted\n",
            "52 % complemeted\n",
            "53 % complemeted\n",
            "54 % complemeted\n",
            "55 % complemeted\n",
            "56 % complemeted\n",
            "57 % complemeted\n",
            "58 % complemeted\n",
            "59 % complemeted\n",
            "60 % complemeted\n",
            "61 % complemeted\n",
            "62 % complemeted\n",
            "63 % complemeted\n",
            "64 % complemeted\n",
            "65 % complemeted\n",
            "66 % complemeted\n",
            "67 % complemeted\n",
            "68 % complemeted\n",
            "69 % complemeted\n",
            "70 % complemeted\n",
            "71 % complemeted\n",
            "72 % complemeted\n",
            "73 % complemeted\n",
            "74 % complemeted\n",
            "75 % complemeted\n",
            "76 % complemeted\n",
            "77 % complemeted\n",
            "78 % complemeted\n",
            "79 % complemeted\n",
            "80 % complemeted\n",
            "81 % complemeted\n",
            "82 % complemeted\n",
            "83 % complemeted\n",
            "84 % complemeted\n",
            "85 % complemeted\n",
            "86 % complemeted\n",
            "87 % complemeted\n",
            "88 % complemeted\n",
            "89 % complemeted\n",
            "90 % complemeted\n",
            "91 % complemeted\n",
            "92 % complemeted\n",
            "93 % complemeted\n",
            "94 % complemeted\n",
            "95 % complemeted\n",
            "96 % complemeted\n",
            "97 % complemeted\n",
            "98 % complemeted\n",
            "99 % complemeted\n",
            "100 % complemeted\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "id": "OWhbvEqJ3FBG",
        "outputId": "752e47e6-5d9b-4f8a-ecbe-2932a7d73fde"
      },
      "source": [
        "print(accuracy())\n",
        "\n",
        "plot_loss(losses)"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "87.66666666666667\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "os3zL3POD9cr",
        "outputId": "2e4d9726-fb4c-48fa-e1c6-fa9bda433c21"
      },
      "source": [
        "optimizer = optim.SGD(FFNN.parameters(), lr = 1e-4)\n",
        "num_epochs = 3\n",
        "batch_size = 10\n",
        "losses = train(num_epochs,batch_size,optimizer)"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1 % complemeted\n",
            "2 % complemeted\n",
            "3 % complemeted\n",
            "4 % complemeted\n",
            "5 % complemeted\n",
            "6 % complemeted\n",
            "7 % complemeted\n",
            "8 % complemeted\n",
            "9 % complemeted\n",
            "10 % complemeted\n",
            "11 % complemeted\n",
            "12 % complemeted\n",
            "13 % complemeted\n",
            "14 % complemeted\n",
            "15 % complemeted\n",
            "16 % complemeted\n",
            "17 % complemeted\n",
            "18 % complemeted\n",
            "19 % complemeted\n",
            "20 % complemeted\n",
            "21 % complemeted\n",
            "22 % complemeted\n",
            "23 % complemeted\n",
            "24 % complemeted\n",
            "25 % complemeted\n",
            "26 % complemeted\n",
            "27 % complemeted\n",
            "28 % complemeted\n",
            "29 % complemeted\n",
            "30 % complemeted\n",
            "31 % complemeted\n",
            "32 % complemeted\n",
            "33 % complemeted\n",
            "34 % complemeted\n",
            "35 % complemeted\n",
            "36 % complemeted\n",
            "37 % complemeted\n",
            "38 % complemeted\n",
            "39 % complemeted\n",
            "40 % complemeted\n",
            "41 % complemeted\n",
            "42 % complemeted\n",
            "43 % complemeted\n",
            "44 % complemeted\n",
            "45 % complemeted\n",
            "46 % complemeted\n",
            "47 % complemeted\n",
            "48 % complemeted\n",
            "49 % complemeted\n",
            "50 % complemeted\n",
            "51 % complemeted\n",
            "52 % complemeted\n",
            "53 % complemeted\n",
            "54 % complemeted\n",
            "55 % complemeted\n",
            "56 % complemeted\n",
            "57 % complemeted\n",
            "58 % complemeted\n",
            "59 % complemeted\n",
            "60 % complemeted\n",
            "61 % complemeted\n",
            "62 % complemeted\n",
            "63 % complemeted\n",
            "64 % complemeted\n",
            "65 % complemeted\n",
            "66 % complemeted\n",
            "67 % complemeted\n",
            "68 % complemeted\n",
            "69 % complemeted\n",
            "70 % complemeted\n",
            "71 % complemeted\n",
            "72 % complemeted\n",
            "73 % complemeted\n",
            "74 % complemeted\n",
            "75 % complemeted\n",
            "76 % complemeted\n",
            "77 % complemeted\n",
            "78 % complemeted\n",
            "79 % complemeted\n",
            "80 % complemeted\n",
            "81 % complemeted\n",
            "82 % complemeted\n",
            "83 % complemeted\n",
            "84 % complemeted\n",
            "85 % complemeted\n",
            "86 % complemeted\n",
            "87 % complemeted\n",
            "88 % complemeted\n",
            "89 % complemeted\n",
            "90 % complemeted\n",
            "91 % complemeted\n",
            "92 % complemeted\n",
            "93 % complemeted\n",
            "94 % complemeted\n",
            "95 % complemeted\n",
            "96 % complemeted\n",
            "97 % complemeted\n",
            "98 % complemeted\n",
            "99 % complemeted\n",
            "100 % complemeted\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "id": "QfsMi8vUEQsq",
        "outputId": "047e99ca-fac2-42a0-c8d7-2b011554db1e"
      },
      "source": [
        "print(accuracy())\n",
        "\n",
        "plot_loss(losses)"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "87.72\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nUUxgQPUETZt"
      },
      "source": [
        ""
      ],
      "execution_count": 37,
      "outputs": []
    }
  ]
}
